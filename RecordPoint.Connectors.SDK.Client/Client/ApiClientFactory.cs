using RecordPoint.Connectors.SDK.Helpers;
using System.Net;

namespace RecordPoint.Connectors.SDK.Client
{
    /// <summary>
    /// Creates a singleton ApiClient
    /// </summary>
    public class ApiClientFactory : IApiClientFactory
    {
        private const string ConnectorApiPrefix = "/connector";
        private static IApiClient _apiClient;
        private static readonly object _apiClientSyncLock = new object();

        static ApiClientFactory()
        {
            // default security is SecurityProtocolType.Ssl3
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13;
        }

        /// <summary>
        /// Creates an IApiClient.
        /// </summary>
        /// <param name="settings"></param>
        /// <returns></returns>
        public IApiClient CreateApiClient(ApiClientFactorySettings settings)
        {
            ValidationHelper.ArgumentNotNull(settings, nameof(settings));
            ValidationHelper.ArgumentNotNullOrWhiteSpace(settings.ConnectorApiUrl, nameof(settings.ConnectorApiUrl));
            // get the api client generated by AutoRest from the swagger as a singleton object
            return GetApiClient(settings);
        }

        /// <summary>
        /// Returns a singleton AuthenticationHelper
        /// </summary>
        /// <returns></returns>
        public IAuthenticationProvider CreateAuthenticationProvider(AuthenticationHelperSettings settings)
        {
            var authProvider = new ConfidentialClientAuthenticationProvider(settings);
            return authProvider;
        }

        /// <summary>
        /// Returns a singleton ApiClient instance
        /// </summary>
        /// <param name="settings"></param>
        /// <returns></returns>
        private static IApiClient GetApiClient(ApiClientFactorySettings settings)
        {
            if (_apiClient == null)
            {
                lock (_apiClientSyncLock)
                {
                    if (_apiClient == null) // this condition required for being thread-safe
                    {
                        // Support both the root site and /connector in the configuration
                        var connectorApiUrl = new Uri(settings.ConnectorApiUrl);
                        if (!settings.ConnectorApiUrl.Contains(ConnectorApiPrefix))
                        {
                            connectorApiUrl = new Uri(connectorApiUrl, ConnectorApiPrefix);
                        }

                        if (settings.ServerCertificateValidation == false)
                        {
                            var certHandler = new HttpClientHandler
                            {
#if NETSTANDARD2_0
                                ServerCertificateCustomValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true
#else
                                ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
#endif
                            };

                            _apiClient = new ApiClient(connectorApiUrl, new NotSpecifiedCredentials(), certHandler);
                        }
                        else
                        {
                            _apiClient = new ApiClient(connectorApiUrl, new NotSpecifiedCredentials());
                        }
                    }
                }
            }
            return _apiClient;
        }
    }
}
