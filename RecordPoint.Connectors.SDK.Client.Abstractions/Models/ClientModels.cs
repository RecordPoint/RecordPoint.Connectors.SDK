// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class SubmissionMetaDataModel
    {
        /// <summary>
        /// Initializes a new instance of the SubmissionMetaDataModel class.
        /// </summary>
        public SubmissionMetaDataModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubmissionMetaDataModel class.
        /// </summary>
        public SubmissionMetaDataModel(string name, string displayName = default(string), string type = default(string), string value = default(string), bool? isSysAdminOnly = default(bool?))
        {
            DisplayName = displayName;
            Name = name;
            Type = type;
            Value = value;
            IsSysAdminOnly = isSysAdminOnly;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSysAdminOnly")]
        public bool? IsSysAdminOnly { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class RelationshipDataModel
    {
        /// <summary>
        /// Initializes a new instance of the RelationshipDataModel class.
        /// </summary>
        public RelationshipDataModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RelationshipDataModel class.
        /// </summary>
        public RelationshipDataModel(string relatedItemNumber, string relationshipType)
        {
            RelatedItemNumber = relatedItemNumber;
            RelationshipType = relationshipType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relatedItemNumber")]
        public string RelatedItemNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relationshipType")]
        public string RelationshipType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RelatedItemNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelatedItemNumber");
            }
            if (RelationshipType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelationshipType");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class AggregationSubmissionInputModel
    {
        /// <summary>
        /// Initializes a new instance of the AggregationSubmissionInputModel
        /// class.
        /// </summary>
        public AggregationSubmissionInputModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AggregationSubmissionInputModel
        /// class.
        /// </summary>
        public AggregationSubmissionInputModel(string externalId, string connectorId, string title, System.DateTime sourceLastModifiedDate, string sourceLastModifiedBy, System.DateTime sourceCreatedDate, string sourceCreatedBy, int? itemTypeId = default(int?), string securityProfileIdentifier = default(string), IList<SubmissionMetaDataModel> sourceProperties = default(IList<SubmissionMetaDataModel>), IList<RelationshipDataModel> relationships = default(IList<RelationshipDataModel>), string author = default(string), string location = default(string), string mediaType = default(string), string parentExternalId = default(string), string barcodeType = default(string), string barcodeValue = default(string), string recordCategoryId = default(string), string correlationId = default(string))
        {
            ItemTypeId = itemTypeId;
            SecurityProfileIdentifier = securityProfileIdentifier;
            SourceProperties = sourceProperties;
            Relationships = relationships;
            ExternalId = externalId;
            ConnectorId = connectorId;
            Title = title;
            Author = author;
            SourceLastModifiedDate = sourceLastModifiedDate;
            SourceLastModifiedBy = sourceLastModifiedBy;
            SourceCreatedDate = sourceCreatedDate;
            SourceCreatedBy = sourceCreatedBy;
            Location = location;
            MediaType = mediaType;
            ParentExternalId = parentExternalId;
            BarcodeType = barcodeType;
            BarcodeValue = barcodeValue;
            RecordCategoryId = recordCategoryId;
            CorrelationId = correlationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemTypeId")]
        public int? ItemTypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityProfileIdentifier")]
        public string SecurityProfileIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceProperties")]
        public IList<SubmissionMetaDataModel> SourceProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relationships")]
        public IList<RelationshipDataModel> Relationships { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedDate")]
        public System.DateTime SourceLastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedBy")]
        public string SourceLastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedDate")]
        public System.DateTime SourceCreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedBy")]
        public string SourceCreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentExternalId")]
        public string ParentExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeType")]
        public string BarcodeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeValue")]
        public string BarcodeValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recordCategoryId")]
        public string RecordCategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExternalId");
            }
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (SourceLastModifiedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceLastModifiedBy");
            }
            if (SourceCreatedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceCreatedBy");
            }
            if (SourceProperties != null)
            {
                foreach (var element in SourceProperties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Relationships != null)
            {
                foreach (var element1 in Relationships)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class MetaDataModel
    {
        /// <summary>
        /// Initializes a new instance of the MetaDataModel class.
        /// </summary>
        public MetaDataModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetaDataModel class.
        /// </summary>
        public MetaDataModel(string name, string type = default(string), string value = default(string), bool? isSysAdminOnly = default(bool?))
        {
            Name = name;
            Type = type;
            Value = value;
            IsSysAdminOnly = isSysAdminOnly;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSysAdminOnly")]
        public bool? IsSysAdminOnly { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class AggregationSubmissionOutputModel
    {
        /// <summary>
        /// Initializes a new instance of the AggregationSubmissionOutputModel
        /// class.
        /// </summary>
        public AggregationSubmissionOutputModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AggregationSubmissionOutputModel
        /// class.
        /// </summary>
        public AggregationSubmissionOutputModel(string externalId, string connectorId, string title, System.DateTime sourceLastModifiedDate, string sourceLastModifiedBy, System.DateTime sourceCreatedDate, string sourceCreatedBy, string id = default(string), string itemType = default(string), string itemNumber = default(string), System.DateTime? createdDate = default(System.DateTime?), string createdBy = default(string), System.DateTime? lastModifiedDate = default(System.DateTime?), string lastModifiedBy = default(string), string contentSource = default(string), bool? isVitalRecord = default(bool?), IList<MetaDataModel> sourceProperties = default(IList<MetaDataModel>), string author = default(string), string location = default(string), string mediaType = default(string), string parentExternalId = default(string), string barcodeType = default(string), string barcodeValue = default(string), string recordCategoryId = default(string), string correlationId = default(string))
        {
            Id = id;
            ItemType = itemType;
            ItemNumber = itemNumber;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            LastModifiedDate = lastModifiedDate;
            LastModifiedBy = lastModifiedBy;
            ContentSource = contentSource;
            IsVitalRecord = isVitalRecord;
            SourceProperties = sourceProperties;
            ExternalId = externalId;
            ConnectorId = connectorId;
            Title = title;
            Author = author;
            SourceLastModifiedDate = sourceLastModifiedDate;
            SourceLastModifiedBy = sourceLastModifiedBy;
            SourceCreatedDate = sourceCreatedDate;
            SourceCreatedBy = sourceCreatedBy;
            Location = location;
            MediaType = mediaType;
            ParentExternalId = parentExternalId;
            BarcodeType = barcodeType;
            BarcodeValue = barcodeValue;
            RecordCategoryId = recordCategoryId;
            CorrelationId = correlationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemType")]
        public string ItemType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemNumber")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDate")]
        public System.DateTime? LastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedBy")]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentSource")]
        public string ContentSource { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVitalRecord")]
        public bool? IsVitalRecord { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceProperties")]
        public IList<MetaDataModel> SourceProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedDate")]
        public System.DateTime SourceLastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedBy")]
        public string SourceLastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedDate")]
        public System.DateTime SourceCreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedBy")]
        public string SourceCreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentExternalId")]
        public string ParentExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeType")]
        public string BarcodeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeValue")]
        public string BarcodeValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recordCategoryId")]
        public string RecordCategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExternalId");
            }
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (SourceLastModifiedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceLastModifiedBy");
            }
            if (SourceCreatedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceCreatedBy");
            }
            if (SourceProperties != null)
            {
                foreach (var element in SourceProperties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ConnectorAuditEventModel
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorAuditEventModel class.
        /// </summary>
        public ConnectorAuditEventModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorAuditEventModel class.
        /// </summary>
        public ConnectorAuditEventModel(string eventExternalId, string connectorId, string eventType, string itemExternalId, System.DateTime? createdDate = default(System.DateTime?), string description = default(string), string userId = default(string), string userName = default(string), IList<SubmissionMetaDataModel> sourceProperties = default(IList<SubmissionMetaDataModel>))
        {
            EventExternalId = eventExternalId;
            ConnectorId = connectorId;
            CreatedDate = createdDate;
            EventType = eventType;
            Description = description;
            UserId = userId;
            UserName = userName;
            ItemExternalId = itemExternalId;
            SourceProperties = sourceProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eventExternalId")]
        public string EventExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eventType")]
        public string EventType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemExternalId")]
        public string ItemExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceProperties")]
        public IList<SubmissionMetaDataModel> SourceProperties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EventExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventExternalId");
            }
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (EventType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventType");
            }
            if (ItemExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemExternalId");
            }
            if (EventType != null)
            {
                if (EventType.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "EventType", 255);
                }
                if (EventType.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "EventType", 0);
                }
            }
            if (SourceProperties != null)
            {
                foreach (var element in SourceProperties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class SearchTermModel
    {
        /// <summary>
        /// Initializes a new instance of the SearchTermModel class.
        /// </summary>
        public SearchTermModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SearchTermModel class.
        /// </summary>
        public SearchTermModel(string fieldName, string fieldType = default(string), string operatorProperty = default(string), string fieldValue = default(string), string categoricalValueType = default(string), string searchContextIdentifier = default(string))
        {
            FieldName = fieldName;
            FieldType = fieldType;
            OperatorProperty = operatorProperty;
            FieldValue = fieldValue;
            CategoricalValueType = categoricalValueType;
            SearchContextIdentifier = searchContextIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fieldType")]
        public string FieldType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fieldValue")]
        public string FieldValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoricalValueType")]
        public string CategoricalValueType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchContextIdentifier")]
        public string SearchContextIdentifier { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FieldName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FieldName");
            }
            if (FieldName != null)
            {
                if (FieldName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FieldName", 255);
                }
                if (FieldName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FieldName", 0);
                }
            }
            if (OperatorProperty != null)
            {
                if (OperatorProperty.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "OperatorProperty", 20);
                }
                if (OperatorProperty.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "OperatorProperty", 0);
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class SearchTreeNodeModel
    {
        /// <summary>
        /// Initializes a new instance of the SearchTreeNodeModel class.
        /// </summary>
        public SearchTreeNodeModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SearchTreeNodeModel class.
        /// </summary>
        public SearchTreeNodeModel(string boolOperator, IList<SearchTreeNodeModel> children = default(IList<SearchTreeNodeModel>), SearchTermModel searchTerm = default(SearchTermModel))
        {
            BoolOperator = boolOperator;
            Children = children;
            SearchTerm = searchTerm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "boolOperator")]
        public string BoolOperator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<SearchTreeNodeModel> Children { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchTerm")]
        public SearchTermModel SearchTerm { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BoolOperator == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BoolOperator");
            }
            if (BoolOperator != null)
            {
                if (BoolOperator.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "BoolOperator", 3);
                }
            }
            if (Children != null)
            {
                foreach (var element in Children)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (SearchTerm != null)
            {
                SearchTerm.Validate();
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class FiltersModel
    {
        /// <summary>
        /// Initializes a new instance of the FiltersModel class.
        /// </summary>
        public FiltersModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FiltersModel class.
        /// </summary>
        public FiltersModel(SearchTreeNodeModel included = default(SearchTreeNodeModel), SearchTreeNodeModel excluded = default(SearchTreeNodeModel), string includedExpression = default(string), string excludedExpression = default(string))
        {
            Included = included;
            Excluded = excluded;
            IncludedExpression = includedExpression;
            ExcludedExpression = excludedExpression;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "included")]
        public SearchTreeNodeModel Included { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excluded")]
        public SearchTreeNodeModel Excluded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "includedExpression")]
        public string IncludedExpression { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excludedExpression")]
        public string ExcludedExpression { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Included != null)
            {
                Included.Validate();
            }
            if (Excluded != null)
            {
                Excluded.Validate();
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ConnectorConfigModel
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorConfigModel class.
        /// </summary>
        public ConnectorConfigModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorConfigModel class.
        /// </summary>
        public ConnectorConfigModel(string status, string displayName, bool hasSubmittedData, string id = default(string), string transactionId = default(string), string connectorTypeId = default(string), string connectorTypeConfigurationId = default(string), string statusCode = default(string), System.DateTime? createdDate = default(System.DateTime?), System.DateTime? modifiedDate = default(System.DateTime?), string createdBy = default(string), string modifiedBy = default(string), string tenantId = default(string), string tenantDomainName = default(string), string originatingOrganization = default(string), string enabledHistory = default(string), IList<MetaDataModel> properties = default(IList<MetaDataModel>), string clientId = default(string), bool? protectionEnabled = default(bool?), FiltersModel filters = default(FiltersModel))
        {
            Id = id;
            TransactionId = transactionId;
            ConnectorTypeId = connectorTypeId;
            ConnectorTypeConfigurationId = connectorTypeConfigurationId;
            Status = status;
            StatusCode = statusCode;
            CreatedDate = createdDate;
            ModifiedDate = modifiedDate;
            CreatedBy = createdBy;
            ModifiedBy = modifiedBy;
            TenantId = tenantId;
            TenantDomainName = tenantDomainName;
            OriginatingOrganization = originatingOrganization;
            EnabledHistory = enabledHistory;
            DisplayName = displayName;
            HasSubmittedData = hasSubmittedData;
            Properties = properties;
            ClientId = clientId;
            ProtectionEnabled = protectionEnabled;
            Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorTypeId")]
        public string ConnectorTypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorTypeConfigurationId")]
        public string ConnectorTypeConfigurationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "statusCode")]
        public string StatusCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedDate")]
        public System.DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tenantDomainName")]
        public string TenantDomainName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originatingOrganization")]
        public string OriginatingOrganization { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabledHistory")]
        public string EnabledHistory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasSubmittedData")]
        public bool HasSubmittedData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<MetaDataModel> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "protectionEnabled")]
        public bool? ProtectionEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public FiltersModel Filters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 255);
                }
                if (DisplayName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DisplayName", 0);
                }
            }
            if (Properties != null)
            {
                foreach (var element in Properties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Filters != null)
            {
                Filters.Validate();
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ConnectorNotificationAcknowledgeModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ConnectorNotificationAcknowledgeModel class.
        /// </summary>
        public ConnectorNotificationAcknowledgeModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ConnectorNotificationAcknowledgeModel class.
        /// </summary>
        public ConnectorNotificationAcknowledgeModel(string connectorId, string notificationId, string processingResult, string connectorStatusMessage = default(string))
        {
            ConnectorId = connectorId;
            NotificationId = notificationId;
            ProcessingResult = processingResult;
            ConnectorStatusMessage = connectorStatusMessage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notificationId")]
        public string NotificationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processingResult")]
        public string ProcessingResult { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorStatusMessage")]
        public string ConnectorStatusMessage { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (NotificationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NotificationId");
            }
            if (ProcessingResult == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProcessingResult");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ItemSubmissionOutputModel
    {
        /// <summary>
        /// Initializes a new instance of the ItemSubmissionOutputModel class.
        /// </summary>
        public ItemSubmissionOutputModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItemSubmissionOutputModel class.
        /// </summary>
        public ItemSubmissionOutputModel(string externalId, string connectorId, string title, string author, System.DateTime sourceLastModifiedDate, string sourceLastModifiedBy, string sourceCreatedBy, System.DateTime sourceCreatedDate, string contentVersion, string location, string mediaType, string parentExternalId, string id = default(string), string itemType = default(string), string itemNumber = default(string), string format = default(string), System.DateTime? lastModifiedDate = default(System.DateTime?), string lastModifiedBy = default(string), System.DateTime? createdDate = default(System.DateTime?), string createdBy = default(string), string contentSource = default(string), string connectorDisplayName = default(string), bool? isVitalRecord = default(bool?), string originatingOrganization = default(string), string previousDisposalAction = default(string), System.DateTime? previousDisposalDate = default(System.DateTime?), string previousDisposalBy = default(string), string previousDisposalById = default(string), string nextDisposalAction = default(string), System.DateTime? nextDisposalDate = default(System.DateTime?), string currentDisposalStatus = default(string), IList<MetaDataModel> sourceProperties = default(IList<MetaDataModel>), string mimeType = default(string), string barcodeType = default(string), string barcodeValue = default(string), string correlationId = default(string))
        {
            Id = id;
            ItemType = itemType;
            ItemNumber = itemNumber;
            Format = format;
            LastModifiedDate = lastModifiedDate;
            LastModifiedBy = lastModifiedBy;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            ContentSource = contentSource;
            ConnectorDisplayName = connectorDisplayName;
            IsVitalRecord = isVitalRecord;
            OriginatingOrganization = originatingOrganization;
            PreviousDisposalAction = previousDisposalAction;
            PreviousDisposalDate = previousDisposalDate;
            PreviousDisposalBy = previousDisposalBy;
            PreviousDisposalById = previousDisposalById;
            NextDisposalAction = nextDisposalAction;
            NextDisposalDate = nextDisposalDate;
            CurrentDisposalStatus = currentDisposalStatus;
            SourceProperties = sourceProperties;
            ExternalId = externalId;
            ConnectorId = connectorId;
            Title = title;
            Author = author;
            MimeType = mimeType;
            SourceLastModifiedDate = sourceLastModifiedDate;
            SourceLastModifiedBy = sourceLastModifiedBy;
            SourceCreatedBy = sourceCreatedBy;
            SourceCreatedDate = sourceCreatedDate;
            ContentVersion = contentVersion;
            Location = location;
            MediaType = mediaType;
            ParentExternalId = parentExternalId;
            BarcodeType = barcodeType;
            BarcodeValue = barcodeValue;
            CorrelationId = correlationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemType")]
        public string ItemType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemNumber")]
        public string ItemNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public string Format { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDate")]
        public System.DateTime? LastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedBy")]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentSource")]
        public string ContentSource { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorDisplayName")]
        public string ConnectorDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVitalRecord")]
        public bool? IsVitalRecord { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originatingOrganization")]
        public string OriginatingOrganization { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "previousDisposalAction")]
        public string PreviousDisposalAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "previousDisposalDate")]
        public System.DateTime? PreviousDisposalDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "previousDisposalBy")]
        public string PreviousDisposalBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "previousDisposalById")]
        public string PreviousDisposalById { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nextDisposalAction")]
        public string NextDisposalAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nextDisposalDate")]
        public System.DateTime? NextDisposalDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currentDisposalStatus")]
        public string CurrentDisposalStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceProperties")]
        public IList<MetaDataModel> SourceProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedDate")]
        public System.DateTime SourceLastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedBy")]
        public string SourceLastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedBy")]
        public string SourceCreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedDate")]
        public System.DateTime SourceCreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentVersion")]
        public string ContentVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentExternalId")]
        public string ParentExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeType")]
        public string BarcodeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeValue")]
        public string BarcodeValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExternalId");
            }
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Author == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Author");
            }
            if (SourceLastModifiedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceLastModifiedBy");
            }
            if (SourceCreatedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceCreatedBy");
            }
            if (ContentVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentVersion");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (MediaType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MediaType");
            }
            if (ParentExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParentExternalId");
            }
            if (SourceProperties != null)
            {
                foreach (var element in SourceProperties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ConnectorNotificationModel
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorNotificationModel class.
        /// </summary>
        public ConnectorNotificationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorNotificationModel class.
        /// </summary>
        public ConnectorNotificationModel(string id = default(string), string notificationType = default(string), System.DateTime? timestamp = default(System.DateTime?), string tenantId = default(string), string connectorId = default(string), ItemSubmissionOutputModel item = default(ItemSubmissionOutputModel), ConnectorConfigModel connectorConfig = default(ConnectorConfigModel), object context = default(object))
        {
            Id = id;
            NotificationType = notificationType;
            Timestamp = timestamp;
            TenantId = tenantId;
            ConnectorId = connectorId;
            Item = item;
            ConnectorConfig = connectorConfig;
            Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notificationType")]
        public string NotificationType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item")]
        public ItemSubmissionOutputModel Item { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorConfig")]
        public ConnectorConfigModel ConnectorConfig { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public object Context { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Item != null)
            {
                Item.Validate();
            }
            if (ConnectorConfig != null)
            {
                ConnectorConfig.Validate();
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class DirectBinarySubmissionInputModel
    {
        /// <summary>
        /// Initializes a new instance of the DirectBinarySubmissionInputModel
        /// class.
        /// </summary>
        public DirectBinarySubmissionInputModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DirectBinarySubmissionInputModel
        /// class.
        /// </summary>
        public DirectBinarySubmissionInputModel(string connectorId, string itemExternalId, string binaryExternalId, string mimeType = default(string), long? fileSize = default(long?), string fileHash = default(string), System.DateTime? sourceLastModifiedDate = default(System.DateTime?), string fileName = default(string), string location = default(string), string correlationId = default(string), bool? isOldVersion = default(bool?), bool? skipEnrichment = default(bool?), System.DateTime? itemSourceLastModifiedDate = default(System.DateTime?))
        {
            MimeType = mimeType;
            FileSize = fileSize;
            FileHash = fileHash;
            SourceLastModifiedDate = sourceLastModifiedDate;
            ConnectorId = connectorId;
            ItemExternalId = itemExternalId;
            BinaryExternalId = binaryExternalId;
            FileName = fileName;
            Location = location;
            CorrelationId = correlationId;
            IsOldVersion = isOldVersion;
            SkipEnrichment = skipEnrichment;
            ItemSourceLastModifiedDate = itemSourceLastModifiedDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileSize")]
        public long? FileSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileHash")]
        public string FileHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedDate")]
        public System.DateTime? SourceLastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemExternalId")]
        public string ItemExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "binaryExternalId")]
        public string BinaryExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isOldVersion")]
        public bool? IsOldVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "skipEnrichment")]
        public bool? SkipEnrichment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "itemSourceLastModifiedDate")]
        public System.DateTime? ItemSourceLastModifiedDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (ItemExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemExternalId");
            }
            if (BinaryExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BinaryExternalId");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class DirectBinarySubmissionResponseModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DirectBinarySubmissionResponseModel class.
        /// </summary>
        public DirectBinarySubmissionResponseModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// DirectBinarySubmissionResponseModel class.
        /// </summary>
        public DirectBinarySubmissionResponseModel(string url = default(string), long? maxFileSize = default(long?))
        {
            Url = url;
            MaxFileSize = maxFileSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxFileSize")]
        public long? MaxFileSize { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ErrorModel
    {
        /// <summary>
        /// Initializes a new instance of the ErrorModel class.
        /// </summary>
        public ErrorModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorModel class.
        /// </summary>
        /// <param name="type">Possible values include: 'General', 'Aggregate',
        /// 'Validation', 'PartialSuccess'</param>
        /// <param name="severity">Possible values include: 'Critical',
        /// 'Error', 'Warning', 'Informational'</param>
        public ErrorModel(string type = default(string), string message = default(string), string messageCode = default(string), string severity = default(string), System.DateTime? dateTime = default(System.DateTime?), string target = default(string), IList<ErrorModel> innerError = default(IList<ErrorModel>), IDictionary<string, IList<ErrorModel>> aggregateErrors = default(IDictionary<string, IList<ErrorModel>>))
        {
            Type = type;
            Message = message;
            MessageCode = messageCode;
            Severity = severity;
            DateTime = dateTime;
            Target = target;
            InnerError = innerError;
            AggregateErrors = aggregateErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'General', 'Aggregate',
        /// 'Validation', 'PartialSuccess'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messageCode")]
        public string MessageCode { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Critical', 'Error',
        /// 'Warning', 'Informational'
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public string Severity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateTime")]
        public System.DateTime? DateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "innerError")]
        public IList<ErrorModel> InnerError { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aggregateErrors")]
        public IDictionary<string, IList<ErrorModel>> AggregateErrors { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ErrorResponseModel
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponseModel class.
        /// </summary>
        public ErrorResponseModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorResponseModel class.
        /// </summary>
        public ErrorResponseModel(ErrorModel error = default(ErrorModel))
        {
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ErrorModel Error { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ItemAcceptanceModel
    {
        /// <summary>
        /// Initializes a new instance of the ItemAcceptanceModel class.
        /// </summary>
        public ItemAcceptanceModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItemAcceptanceModel class.
        /// </summary>
        public ItemAcceptanceModel(string externalId = default(string), System.DateTime? sourceLastModifiedDate = default(System.DateTime?), string aggregationStatus = default(string))
        {
            ExternalId = externalId;
            SourceLastModifiedDate = sourceLastModifiedDate;
            AggregationStatus = aggregationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedDate")]
        public System.DateTime? SourceLastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aggregationStatus")]
        public string AggregationStatus { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RecordPoint.Connectors.SDK.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ItemSubmissionInputModel
    {
        /// <summary>
        /// Initializes a new instance of the ItemSubmissionInputModel class.
        /// </summary>
        public ItemSubmissionInputModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItemSubmissionInputModel class.
        /// </summary>
        public ItemSubmissionInputModel(string externalId, string connectorId, string title, string author, System.DateTime sourceLastModifiedDate, string sourceLastModifiedBy, string sourceCreatedBy, System.DateTime sourceCreatedDate, string contentVersion, string location, string mediaType, string parentExternalId, string securityProfileIdentifier = default(string), IList<SubmissionMetaDataModel> sourceProperties = default(IList<SubmissionMetaDataModel>), IList<RelationshipDataModel> relationships = default(IList<RelationshipDataModel>), IList<DirectBinarySubmissionInputModel> binariesSubmitted = default(IList<DirectBinarySubmissionInputModel>), string mimeType = default(string), string barcodeType = default(string), string barcodeValue = default(string), string correlationId = default(string))
        {
            SecurityProfileIdentifier = securityProfileIdentifier;
            SourceProperties = sourceProperties;
            Relationships = relationships;
            BinariesSubmitted = binariesSubmitted;
            ExternalId = externalId;
            ConnectorId = connectorId;
            Title = title;
            Author = author;
            MimeType = mimeType;
            SourceLastModifiedDate = sourceLastModifiedDate;
            SourceLastModifiedBy = sourceLastModifiedBy;
            SourceCreatedBy = sourceCreatedBy;
            SourceCreatedDate = sourceCreatedDate;
            ContentVersion = contentVersion;
            Location = location;
            MediaType = mediaType;
            ParentExternalId = parentExternalId;
            BarcodeType = barcodeType;
            BarcodeValue = barcodeValue;
            CorrelationId = correlationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityProfileIdentifier")]
        public string SecurityProfileIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceProperties")]
        public IList<SubmissionMetaDataModel> SourceProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relationships")]
        public IList<RelationshipDataModel> Relationships { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "binariesSubmitted")]
        public IList<DirectBinarySubmissionInputModel> BinariesSubmitted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectorId")]
        public string ConnectorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedDate")]
        public System.DateTime SourceLastModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceLastModifiedBy")]
        public string SourceLastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedBy")]
        public string SourceCreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedDate")]
        public System.DateTime SourceCreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentVersion")]
        public string ContentVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentExternalId")]
        public string ParentExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeType")]
        public string BarcodeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "barcodeValue")]
        public string BarcodeValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExternalId");
            }
            if (ConnectorId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectorId");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Author == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Author");
            }
            if (SourceLastModifiedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceLastModifiedBy");
            }
            if (SourceCreatedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceCreatedBy");
            }
            if (ContentVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentVersion");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (MediaType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MediaType");
            }
            if (ParentExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParentExternalId");
            }
            if (SourceProperties != null)
            {
                foreach (var element in SourceProperties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Relationships != null)
            {
                foreach (var element1 in Relationships)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (BinariesSubmitted != null)
            {
                foreach (var element2 in BinariesSubmitted)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}