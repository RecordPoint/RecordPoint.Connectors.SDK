using Microsoft.Rest;
using Microsoft.Rest.Serialization;
using Newtonsoft.Json;
using RecordPoint.Connectors.SDK.Client.Models;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace RecordPoint.Connectors.SDK.Client
{
    /// <summary>
    /// Why is this here?
    /// 
    /// The OpenAPI/Swagger 2.0 tooling for providing binary/file uploads to HTTP methods is not great -
    /// it only supports multipart/form-data which is not suitable for our needs. 
    /// 
    /// The autogenerated client in ApiClient therefore doesn't provide any way to provide a Stream
    /// to the binary submission endpoint. Hence, we provide a copy+paste of that method here,
    /// with an additional parameter for the Stream.
    /// 
    /// This should be revisited as/when we upgrade to OpenAPI/Swagger 3.0.
    /// </summary>
    public partial class ApiClient
    {
        /// <summary>
        /// Submits a binary to be archived and protected by Records365 vNext.
        /// </summary>
        /// <param name='connectorId'>
        /// The ID of the connector submitting the binary.
        /// </param>
        /// <param name='itemExternalId'>
        /// The ExternalID of the item that the binary belongs to.
        /// </param>
        /// <param name='binaryExternalId'>
        /// The ExternalID of the binary.
        /// </param>
        /// <param name='fileName'>
        /// An optional file name to associate with the binary.
        /// </param>
        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='inputStream'>
        /// A stream for binary data to upload.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ErrorResponseModel>> ApiBinariesPostWithHttpMessagesAndStreamAsync(string connectorId = default(string), 
            string itemExternalId = default(string), 
            string binaryExternalId = default(string), 
            string fileName = default(string), 
            string acceptLanguage = default(string), 
            Dictionary<string, List<string>> customHeaders = null, 
            Stream inputStream = null, 
            CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("connectorId", connectorId);
                tracingParameters.Add("itemExternalId", itemExternalId);
                tracingParameters.Add("binaryExternalId", binaryExternalId);
                tracingParameters.Add("fileName", fileName);
                tracingParameters.Add("acceptLanguage", acceptLanguage);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ApiBinariesPost", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "api/Binaries").ToString();
            List<string> _queryParameters = new List<string>();
            if (connectorId != null)
            {
                _queryParameters.Add(string.Format("connectorId={0}", System.Uri.EscapeDataString(connectorId)));
            }
            if (itemExternalId != null)
            {
                _queryParameters.Add(string.Format("itemExternalId={0}", System.Uri.EscapeDataString(itemExternalId)));
            }
            if (binaryExternalId != null)
            {
                _queryParameters.Add(string.Format("binaryExternalId={0}", System.Uri.EscapeDataString(binaryExternalId)));
            }
            if (fileName != null)
            {
                _queryParameters.Add(string.Format("fileName={0}", System.Uri.EscapeDataString(fileName)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (acceptLanguage != null)
            {
                if (_httpRequest.Headers.Contains("Accept-Language"))
                {
                    _httpRequest.Headers.Remove("Accept-Language");
                }
                _httpRequest.Headers.TryAddWithoutValidation("Accept-Language", acceptLanguage);
            }
            
            if (customHeaders != null)
            {
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // BEGIN MANUALLY MODIFIED CODE
            _httpRequest.Content = new StreamContent(inputStream);
            // ensure that Expect Continue behaviour is always used for binary submissions
            _httpRequest.Headers.ExpectContinue = true;
            // END MANUALLY MODIFIED CODE 

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null)
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else
                {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ErrorResponseModel>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ErrorResponseModel>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }
    }
}
